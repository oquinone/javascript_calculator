{"version":3,"sources":["Components/Buttons.jsx","App.js","index.js"],"names":["Buttons","props","numInput","val","state","decimal","input","zero","acceptedOperators","clickedOperationKey","concatention","concatenateAfterOperationKey","concatBeforeOperationKey","inputingFirstValue","setState","expression","currentExpression","negative","isNegative","temp","concat","hold","splice","length","results","holdExpr","makeNegative","operation","op","expr","isDouble","removeExtraOperations","arr","len","expressionArray","this","calc","parseFloat","i","performCalculation","toString","v1","v2","id","onClick","clear","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d18d0837.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css'\n\nclass Buttons extends Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            input: \"0\",\n            expression: [],\n            currentExpression: \"\",\n            results: \"\",\n\n            decimal: false,\n            negative: false,\n            concatention: false,\n            zero: false   \n        }\n    }\n\n    // --------------------------------- USER INPUT FUNCTIONS ---------------------------------\n\n    /*  Takes care of creating algebraic expression by user input*/\n    numInput = (val) => {\n        if(val !== \".\" || (val === \".\" && !(this.state.decimal)) ){\n            if(this.state.input === \"0\" && !this.state.zero){\n                this.inputingFirstValue(val);\n            }\n            else if(this.acceptedOperators(this.state.input)){\n                this.clickedOperationKey(val);\n            }\n            else if(this.state.concatention){\n                this.concatenateAfterOperationKey(val);\n            }\n            else{\n                this.concatBeforeOperationKey(val);\n            }\n            \n        if(val === \".\"){\n            this.setState({\n                decimal: true\n            })\n        }\n    }\n}\n    /*  Takes care inputing first value into expression array*/\n    inputingFirstValue = (val) => {\n        if(val === \"0\"){\n            this.setState({\n                zero: true\n            })\n        }\n        \n        this.setState({\n            input: val,\n            expression: [val],\n            currentExpression: val\n        })\n    }\n\n    /*Adds operation pressed by user into expression array*/\n    clickedOperationKey = (val) => {\n        if(this.state.negative){\n            this.isNegative(val)\n        }\n        else{\n            this.setState({\n                input: val,\n                expression: [...this.state.expression, val],\n                currentExpression: val,\n                zero: false\n            })\n            \n            if(val === \"0\"){\n                this.setState({\n                    zero: true\n                })\n            }\n        }\n    }\n\n    /*Concatenates single pressed digits together AFTER clicking an operation key*/\n    concatenateAfterOperationKey = (val) => {\n        if(val !== \"0\" || (val === \"0\" && !this.state.zero)){\n            let temp = this.state.currentExpression.concat(val);\n            let hold = [...this.state.expression];\n            hold.splice(hold.length - 1, 1, temp);\n            this.setState({\n                input: temp,\n                expression: hold,\n                currentExpression: temp\n            })\n        }\n    }\n\n    /*Concatenates single pressed digits together BEFORE clicking an operation key*/\n    concatBeforeOperationKey = (val) => {\n        if(val !== \"0\" || (val === \"0\" && !this.state.zero)){\n            let temp = this.state.currentExpression.concat(val);\n            this.setState({\n                input: temp,\n                expression: [temp],\n                currentExpression: temp\n            })\n\n            if(this.state.results !== \"\" && (this.state.input === this.state.expression[0])){\n                this.setState({\n                    results: \"\"\n                })\n            }   \n        }\n    }\n\n    /* Convert into negative number */\n    isNegative = (val) =>{\n        let holdExpr = [...this.state.expression];\n        let makeNegative = \"-\" + val;\n        holdExpr.splice(holdExpr.length - 1, 1, makeNegative);\n\n        this.setState({\n            expression: holdExpr,\n            currentExpression: makeNegative,\n            negative: false\n        })\n    }\n\n    // --------------------------------- OPERATION FUNCTIONS ---------------------------------\n\n    /* Add operation to the state */\n    operation = (op) => {\n        if(this.state.results === \"\"){\n            let expr = [...this.state.expression]\n            if(this.acceptedOperators(expr[expr.length - 1])){\n                if(!this.state.negative){\n                    if(op === \"-\"){\n                        expr.splice(expr.length , 0, op)\n                        this.setState({\n                            expression: expr,\n                            negative: true\n                        })\n                    }\n                    else{\n                        expr.splice(expr.length - 1, 1, op);\n                        this.setState({\n                            input: op, \n                            expression: expr,\n                        })\n                    }\n                }\n                else if(this.state.negative){\n                    if(op !== \"-\"){\n                        let temp = [...this.state.expression];\n                        temp.splice(temp.length - 2, 2, op);\n                        this.setState({\n                            input: op,\n                            expression: temp,\n                            negative: false\n                        })\n                    }\n                }\n            }\n            else{\n                if(this.state.input === \"0\" && op === \"-\"){\n                    this.setState({\n                        input: op,\n                        expression: [op],\n                        currentExpression: op,\n                        negative: true\n                    })\n                }\n                else{\n                    this.setState({\n                        input: op,\n                        expression: [...this.state.expression, op],\n                        concatention: true,\n                    })\n                }\n            }\n        }\n        else{\n            this.setState({\n                input: op,\n                expression: [this.state.results, op],\n                currentExpression: \"\",\n                results: \"\",\n                concatention: true\n            })\n        }\n\n        this.isDouble();\n    }\n\n    isDouble = () => {\n        if(this.state.decimal){\n            this.setState({\n                decimal: false\n            })\n        }\n    }\n\n    // --------------------------------- RESULTS FUNCTIONS ---------------------------------\n\n    /* Finds Result Of Expression Created by User*/\n    results(){\n        let expressionArray = [...this.state.expression];\n        this.removeExtraOperations(expressionArray);\n\n        if(expressionArray.length === 1){\n            this.setState({\n                input: expressionArray[0],\n                expression: [expressionArray[0], \"=\", expressionArray[0]],\n                currentExpression: \"\",\n                results: expressionArray[0],\n\n                decimal: false,\n                negative: false,\n                concatention: false\n            })\n        }\n        else{\n            let len = expressionArray.length;\n            let calc = parseFloat(expressionArray[0]);\n\n            for(let i = 1; i < len; i += 2){\n                calc = this.performCalculation(calc, parseFloat(expressionArray[i+1]), expressionArray[i]);\n            }\n\n            this.setState({\n                input: calc.toString(),\n                expression: [...expressionArray, \"=\", calc.toString()],\n                currentExpression: \"\",\n                results: calc.toString(),\n\n                decimal: false,\n                negative: false,\n                concatention: false\n            })\n        }\n    }\n\n    performCalculation(v1, v2, op){\n        switch(op){\n            case \"+\":\n                return v1 + v2;\n            case \"-\": \n                return  v1 - v2;\n            case \"*\":\n                return  v1 * v2;\n            case \"/\":\n                return  v1 / v2;\n            default:\n                return  v2;\n        }\n    }\n\n    removeExtraOperations = (arr) => {\n        let len = arr.length;\n\n        while(this.acceptedOperators(arr[len - 1])){\n            arr.splice(len - 1, 1);\n            len = arr.length;\n        }\n    }\n\n    // --------------------------------- HELPER FUNCTIONS ---------------------------------\n     /* Resets State*/\n     clear(){\n        this.setState({\n            input: \"0\",\n            expression: [],\n            currentExpression: \"\",\n            results: \"\",\n\n            decimal: false,\n            negative: false,\n            concatention: false,\n            zero: false \n        })\n    }\n\n    acceptedOperators(op){\n        switch(op){\n            case \"-\":\n                return true;\n            case \"+\":\n                return true;\n            case \"*\":\n                return true;\n            case \"/\":\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    render() { \n        return (\n        <div id=\"calc\">\n            {/*    Display entire algebraic expression    */}\n            <div id=\"expression\"> \n                {this.state.expression}\n            </div>\n\n            {/*   Display user input   */}\n            <div id=\"display\">\n                <h1>{this.state.input}</h1>\n            </div>\n\n            {/*  Buttons */}\n            <div id=\"buttons\">\n                <button id=\"clear\" onClick={() => this.clear()}>\n                    AC\n                </button>\n                <button id=\"divide\" onClick={() => this.operation(\"/\")}>\n                    /\n                </button>\n                <button id=\"multiply\" onClick={() => this.operation(\"*\")}>\n                    x\n                </button>\n                <br/>\n                <button id=\"seven\" onClick={() => this.numInput(\"7\")}>\n                    7\n                </button>\n                <button id=\"eight\" onClick={() => this.numInput(\"8\")}>\n                    8\n                </button>\n                <button id=\"nine\" onClick={() => this.numInput(\"9\")}>\n                    9\n                </button>\n                <button id=\"subtract\" onClick={() => this.operation(\"-\")}>\n                    -\n                </button>\n                <br/>\n                <button id=\"four\" onClick={() => this.numInput(\"4\")}>\n                    4\n                </button>\n                <button id=\"five\" onClick={() => this.numInput(\"5\")}>\n                    5\n                </button>\n                <button id=\"six\" onClick={() => this.numInput(\"6\")}>\n                    6\n                </button>\n                <button id=\"add\" onClick={() => this.operation(\"+\")}>\n                    +\n                </button>\n                <button id=\"one\" onClick={() => this.numInput(\"1\")}>\n                    1\n                </button>\n                <button id=\"two\" onClick={() => this.numInput(\"2\")}>\n                    2\n                </button>\n                <button id=\"three\" onClick={() => this.numInput(\"3\")}>\n                    3\n                </button>\n                \n                <button id=\"equals\" onClick={() => this.results()}>\n                    =\n                </button>\n                <button id=\"zero\" onClick={() => this.numInput(\"0\")}>\n                    0\n                </button>\n                <button id=\"decimal\" onClick={() => this.numInput(\".\")}>\n                    .\n                </button>\n            </div>\n        </div> );\n    }\n}\nexport default Buttons;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import Screen from './Components/Results'\nimport Buttons from './Components/Buttons'\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <Buttons/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n//Redux\n// import { Provider } from 'react-redux'\n// import { createStore } from 'redux'\n// import rootReducer from './reducers'\n// import store from './store'\n\n// const store = createStore(rootReducer)\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}